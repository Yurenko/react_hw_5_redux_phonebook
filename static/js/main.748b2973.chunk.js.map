{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContastForm/ContactForm.module.css","components/ContastForm/ContactForm.js","redux/filterSelector.js","redux/filterAction.js","components/ContastForm/ContactFormContainer.js","components/Filter/Filter.js","components/Filter/FilterContainer.js","components/ContactList/ContactList.js","components/ContactList/ContactListContainer.js","App.js","redux/filterReduser.js","redux/srore.js","index.js"],"names":["module","exports","ContactForm","state","id","name","number","sortName","contacts","some","contact","handleChange","e","target","value","setState","shortid","generate","handleSubmit","preventDefault","props","alert","addUser","prevProps","this","localStorage","setItem","JSON","stringify","onSubmit","className","style","form","htmlFor","type","pattern","title","required","onChange","Component","PropsType","PropTypes","string","defaultProps","getContacts","filterReduser","getFilter","filter","inputFilter","createSelector","i","toLowerCase","includes","ActionsType","connect","dispatch","user","payload","Filter","handleFilter","example","handleDelete","length","map","item","button","onClick","contactDeleteAction","ContactList","App","ls","getItem","items","parse","fetch","filerSuccessActions","combineReducers","rootStorage","store","createStore","devToolsEnhancer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.748b2973.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__-MpN0\",\"button\":\"ContactList_button__29XGW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__Y3v2Q\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\n\nimport style from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  static PropsType = {\n    name: PropTypes.string,\n    number: PropTypes.string,\n  };\n\n  static defaultProps = {\n    name: '',\n    number: '',\n  };\n\n  state = {\n    id: '',\n    name: '',\n    number: '',\n  };\n\n  componentDidUpdate(prevProps) {\n    const { contacts } = this.props;\n    if (prevProps.contacts !== contacts) {\n      localStorage.setItem('contacts', JSON.stringify(contacts));\n    }\n  }\n\n  sortName = (contacts, name) =>\n    contacts.some(contact => contact.name === name);\n\n  handleChange = e => {\n    const { name, value } = e.target;\n\n    this.setState({\n      id: shortid.generate(),\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    const { value } = e.target.name;\n    e.preventDefault();\n    const i = this.sortName(this.props.contacts, value);\n    if (!i) {\n      this.props.addUser(this.state);\n    } else {\n      alert(`${value} is already in contacts`);\n    }\n\n    this.setState({\n      id: '',\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit} className={style.form}>\n        <label htmlFor=\"name\">\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            id=\"name\"\n            onChange={this.handleChange}\n          />\n        </label>\n        <label htmlFor=\"namber\">\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            id=\"number\"\n            value={number}\n            onChange={this.handleChange}\n          />\n        </label>\n        <button type=\"submit\">submit</button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import { createSelector } from 'reselect';\n\nexport const getContacts = state => state.filterReduser.contacts;\n\nexport const getFilter = state => state.filterReduser.filter;\n\nexport const inputFilter = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) =>\n    contacts.filter(i => i.name.toLowerCase().includes(filter.toLowerCase())),\n);\n","export const ActionsType = {\n  FILTER_START: 'FILTER_START',\n  FILTER_SUCCESS: 'FILTER_SUCCESS',\n  FILTER_ERROR: 'FILTER_START',\n  CONTACT_ADD: 'CONTACT_ADD',\n  CONTACT_DELETE: 'CONTACT_DELETE',\n  INPUT_FILTER: 'INPUT_FILTER',\n};\n\nexport const filerStartActions = () => ({\n  type: ActionsType.FILTER_START,\n});\n\nexport const filerSuccessActions = contacts => ({\n  type: ActionsType.FILTER_SUCCESS,\n  payload: contacts,\n});\n\nexport const contactAddAction = name => ({\n  type: ActionsType.CONTACT_ADD,\n  payload: name,\n});\n\nexport const contactDeleteAction = id => ({\n  type: ActionsType.CONTACT_DELETE,\n  payload: id,\n});\n\nexport const filterInputAction = string => ({\n  type: ActionsType.INPUT_FILTER,\n  payload: string,\n});\n","import { connect } from 'react-redux';\nimport ContactForm from './ContactForm';\nimport { getContacts } from '../../redux/filterSelector';\nimport { contactAddAction } from '../../redux/filterAction';\n\nconst mapStateToProps = state => ({\n  contacts: getContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addUser: user => dispatch(contactAddAction(user)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\n\nfunction Filter({ filter = '', handleFilter }) {\n  return (\n    <input\n      type=\"text\"\n      name=\"name\"\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      required\n      value={filter}\n      onChange={handleFilter}\n    />\n  );\n}\n\nexport default Filter;\n","import { connect } from 'react-redux';\nimport { filterInputAction } from '../../redux/filterAction';\nimport { getFilter } from '../../redux/filterSelector';\nimport Filter from './Filter';\n\nconst mapStateToProps = state => ({\n  filter: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleFilter: e => dispatch(filterInputAction(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport style from './ContactList.module.css';\n\nfunction Filter({ example = [], handleDelete }) {\n  return (\n    <div className={style.contacts}>\n      <span>Find contacts by name</span>\n      {example.length > 0 && (\n        <ul>\n          {example.map(item => (\n            <li key={item.id}>\n              {item.name} : {item.number}\n              <button\n                className={style.button}\n                type=\"submit\"\n                onClick={() => handleDelete(item.id)}\n              >\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default Filter;\n","import { connect } from 'react-redux';\nimport ContactList from './ContactList';\nimport { inputFilter } from '../../redux/filterSelector';\nimport { contactDeleteAction } from '../../redux/filterAction';\n\nconst mapStateToProps = state => ({\n  example: inputFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleDelete: id => dispatch(contactDeleteAction(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport ContactForm from './components/ContastForm/ContactFormContainer';\nimport Filter from './components/Filter/FilterContainer';\nimport ContactList from './components/ContactList/ContactListContainer';\nimport { filerSuccessActions } from './redux/filterAction';\n\nclass App extends Component {\n  state = {};\n\n  componentDidMount() {\n    const ls = localStorage.getItem('contacts');\n    const items = JSON.parse(ls);\n\n    if (!items) return;\n    const { fetch } = this.props;\n    fetch(items);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm addUser={this.addUser} />\n\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mdtp = dispatch => ({\n  fetch: contacts => dispatch(filerSuccessActions(contacts)),\n});\n\nexport default connect(null, mdtp)(App);\n","import { combineReducers } from 'redux';\nimport { ActionsType } from './filterAction';\n\nconst contactsReduser = (state = [], { type, payload }) => {\n  switch (type) {\n    case ActionsType.FILTER_SUCCESS:\n      return payload;\n    case ActionsType.CONTACT_ADD:\n      return [...state, payload];\n    case ActionsType.CONTACT_DELETE:\n      return state.filter(i => i.id !== payload);\n    default:\n      return state;\n  }\n};\n\nconst filterReduser = (state = '', { type, payload }) => {\n  switch (type) {\n    case ActionsType.INPUT_FILTER:\n      return payload;\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  contacts: contactsReduser,\n  filter: filterReduser,\n});\n","import { combineReducers, createStore } from 'redux';\nimport { devToolsEnhancer } from 'redux-devtools-extension';\nimport filterReduser from './filterReduser';\n\nconst rootStorage = combineReducers({\n  filterReduser,\n});\n\nconst store = createStore(rootStorage, devToolsEnhancer());\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/srore';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}